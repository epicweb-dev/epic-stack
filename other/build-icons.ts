import { promises as fs } from 'node:fs'
import * as path from 'node:path'
import { glob } from 'glob'
import { parse } from 'node-html-parser'

const inputFolder = path.join(process.cwd(), 'other', 'svg-icons')
const outputFolder = path.join(process.cwd(), 'app', 'components', 'ui')

const files = glob.sync('**/*.svg', {
	cwd: inputFolder,
})

if (files.length === 0) {
	console.log('No SVG files found in inputFolder')
	process.exit(0)
}

console.log(
	`Generating sprite for ${path.relative(process.cwd(), inputFolder)}`,
)

await generateSvgSprite({
	files,
	inputFolder,
	outputPath: path.join(outputFolder, 'icon.svg'),
})

for (const file of files) {
	console.log('âœ…', file)
}
console.log(
	`Saved to ${path.relative(
		process.cwd(),
		path.join(outputFolder, 'icon.svg'),
	)}`,
)

await generateJson({
	files,
	outputPath: path.join(outputFolder, 'icons.json'),
})

console.log(
	`Manifest saved to ${path.relative(
		process.cwd(),
		path.join(outputFolder, 'icons.json'),
	)}`,
)

/**
 * Creates a single SVG file that contains all the icons
 */
async function generateSvgSprite({
	files,
	inputFolder,
	outputPath,
}: {
	files: string[]
	inputFolder: string
	outputPath: string
}) {
	// Each SVG becomes a symbol and we wrap them all in a single SVG
	const symbols = await Promise.all(
		files.map(async file => {
			const input = await fs.readFile(path.join(inputFolder, file), 'utf8')
			const root = parse(input)

			const svg = root.querySelector('svg')
			if (!svg) throw new Error('No SVG element found')

			svg.tagName = 'symbol'
			svg.setAttribute('id', file.replace(/\.svg$/, ''))
			svg.removeAttribute('xmlns')
			svg.removeAttribute('xmlns:xlink')
			svg.removeAttribute('version')
			svg.removeAttribute('width')
			svg.removeAttribute('height')

			return root.toString().trim()
		}),
	)

	const output = [
		`<?xml version="1.0" encoding="UTF-8"?>`,
		`<!-- This file is generated by npm run build:icons -->`,
		`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="0" height="0">`,
		...symbols,
		`</svg>`,
	].join('\n')

	const existingOutput = await fs.readFile(outputPath, 'utf8')
	if (existingOutput === output) {
		// No changes
		return
	}

	return fs.writeFile(outputPath, output, 'utf8')
}

/**
 * Creates a JSON file that lists all the icon names
 * Each icon name is a key with a value of `true`
 * This allows us to get type inference on the keys of the json file
 */
async function generateJson({
	files,
	outputPath,
}: {
	files: string[]
	outputPath: string
}) {
	const output = {
		_comment: `This file is generated by npm run build:icons`,
		iconNames: Object.fromEntries(
			files.map(file => {
				// We can only get type inference on the keys of a json file
				return [path.basename(file, '.svg'), true]
			}),
		),
	}

	const json = JSON.stringify(output, null, '\t')

	return fs.writeFile(outputPath, json, 'utf8')
}
