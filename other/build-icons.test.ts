import * as path from 'node:path'
import fsExtra from 'fs-extra'
import { generateSvgSprite } from './build-icons.ts'
import { describe, beforeAll, afterEach, it, expect } from 'vitest'

describe('generateSvgSprite', () => {
	const cwd = process.cwd()
	const inputDir = path.join(cwd, 'tests', 'fixtures', 'svg-icons')
	const outputDir = path.join(cwd, 'tests', 'output', 'icons')
	const spriteFilepath = path.join(outputDir, 'sprite.svg')

	beforeAll(async () => {
		await fsExtra.ensureDir(outputDir)
	})

	afterEach(async () => {
		await fsExtra.emptyDir(outputDir)
	})

	it('should generate a sprite with all icons', async () => {
		const files = ['icon1.svg', 'icon2.svg']

		await generateSvgSprite({
			files,
			inputDir,
			outputPath: spriteFilepath,
		})

		const output = await fsExtra.readFile(spriteFilepath, 'utf8')
		expect(output.trim()).toMatchInlineSnapshot(`
			"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
			<!-- This file is generated by npm run build:icons -->
			<svg xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" width=\\"0\\" height=\\"0\\">
			<defs>
			<symbol viewBox=\\"0 0 15 15\\" fill=\\"none\\" id=\\"icon1\\">
			  <path     fill-rule=\\"evenodd\\"
			    clip-rule=\\"evenodd\\"
			    d=\\"M6.85355 3.14645C7.04882 3.34171 7.04882 3.65829 6.85355 3.85355L3.70711 7H12.5C12.7761 7 13 7.22386 13 7.5C13 7.77614 12.7761 8 12.5 8H3.70711L6.85355 11.1464C7.04882 11.3417 7.04882 11.6583 6.85355 11.8536C6.65829 12.0488 6.34171 12.0488 6.14645 11.8536L2.14645 7.85355C1.95118 7.65829 1.95118 7.34171 2.14645 7.14645L6.14645 3.14645C6.34171 2.95118 6.65829 2.95118 6.85355 3.14645Z\\"
			    fill=\\"currentColor\\"
			  ></path>
			</symbol>
			<symbol viewBox=\\"0 0 15 15\\" fill=\\"none\\" id=\\"icon2\\">
			  <path     fill-rule=\\"evenodd\\"
			    clip-rule=\\"evenodd\\"
			    d=\\"M0.877014 7.49988C0.877014 3.84219 3.84216 0.877045 7.49985 0.877045C11.1575 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1575 14.1227 7.49985 14.1227C3.84216 14.1227 0.877014 11.1575 0.877014 7.49988ZM7.49985 1.82704C4.36683 1.82704 1.82701 4.36686 1.82701 7.49988C1.82701 8.97196 2.38774 10.3131 3.30727 11.3213C4.19074 9.94119 5.73818 9.02499 7.50023 9.02499C9.26206 9.02499 10.8093 9.94097 11.6929 11.3208C12.6121 10.3127 13.1727 8.97172 13.1727 7.49988C13.1727 4.36686 10.6328 1.82704 7.49985 1.82704ZM10.9818 11.9787C10.2839 10.7795 8.9857 9.97499 7.50023 9.97499C6.01458 9.97499 4.71624 10.7797 4.01845 11.9791C4.97952 12.7272 6.18765 13.1727 7.49985 13.1727C8.81227 13.1727 10.0206 12.727 10.9818 11.9787ZM5.14999 6.50487C5.14999 5.207 6.20212 4.15487 7.49999 4.15487C8.79786 4.15487 9.84999 5.207 9.84999 6.50487C9.84999 7.80274 8.79786 8.85487 7.49999 8.85487C6.20212 8.85487 5.14999 7.80274 5.14999 6.50487ZM7.49999 5.10487C6.72679 5.10487 6.09999 5.73167 6.09999 6.50487C6.09999 7.27807 6.72679 7.90487 7.49999 7.90487C8.27319 7.90487 8.89999 7.27807 8.89999 6.50487C8.89999 5.73167 8.27319 5.10487 7.49999 5.10487Z\\"
			    fill=\\"currentColor\\"
			  ></path>
			</symbol>
			</defs>
			</svg>"
		`)
	})

	it('should not include doctype or xml header', async () => {
		const files = ['icon1.svg', 'iconWithMeta.svg']

		await generateSvgSprite({
			files,
			inputDir,
			outputPath: spriteFilepath,
		})

		const output = await fsExtra.readFile(spriteFilepath, 'utf8')
		expect(output.match(/<\?xml/g)).toHaveLength(1)
		expect(output.match(/<!DOCTYPE/g)).toBeNull()
	})
})
