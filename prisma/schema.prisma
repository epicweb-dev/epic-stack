// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  username       String        @unique
  name           String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  image          UserImage?
  password       Password?
  notes          Note[]
  roles          Role[]
  sessions       Session[]
  connections    Connection[]
  teachers       Teacher[]     @relation("UserTeachers") // Teachers associated with this user
  managedSchools School[]      @relation("UserManagedSchools") // Schools managed by the user
  studentProfile Student?      @relation("StudentProfile") // Link to the user's own student profile
  application    Application[] // Enrollments associated with this user
  events         Event[] // Events related to the user
}

model Teacher {
  id              String   @id @default(cuid())
  user            User     @relation("UserTeachers", fields: [userId], references: [id])
  userId          String
  schools         School[] @relation("TeacherSchools") // Schools where the teacher teaches
  scheduledEvents Event[]  @relation("TeacherScheduledEvents") // Events scheduled by this teacher
  // Other teacher-specific fields can be added here
}

model Student {
  id              String   @id @default(cuid())
  schools         School[] @relation("StudentSchools") // Schools where the student is enrolled
  scheduledEvents Event[]  @relation("StudentScheduledEvents") // Events scheduled for this student
  user            User?    @relation("StudentProfile", fields: [userId], references: [id]) // Link to the student's user profile
  userId          String?  @unique
  // Other student-specific fields can be added here
}

model School {
  id          String        @id @default(cuid())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  owner       User          @relation("UserManagedSchools", fields: [ownerId], references: [id])
  ownerId     String
  teachers    Teacher[]     @relation("TeacherSchools") // Teachers in this school
  students    Student[]     @relation("StudentSchools") // Students in this school
  application Application[] @relation("SchoolApplication") // Enrollments associated with this school
  events      Event[] // Events related to the school
  // Other fields specific to the School model can be added here
}

model Application {
  id              String @id @default(cuid())
  user            User   @relation(fields: [userId], references: [id])
  userId          String
  school          School @relation("SchoolApplication", fields: [schoolId], references: [id])
  schoolId        String
  applicationType String

  @@map("Application")
}

model Event {
  id        String    @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  school    School    @relation(fields: [schoolId], references: [id])
  schoolId  String
  teachers  Teacher[] @relation("TeacherScheduledEvents") // Teachers who have scheduled this event
  students  Student[] @relation("StudentScheduledEvents") // Students who have scheduled this event

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}
