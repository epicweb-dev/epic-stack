name: 🚀 Auto - Build and Deploy to Stage & Production
on:
  push:
    branches:
      - main
      - dev
  pull_request: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 18

permissions:
  actions: write
  contents: read

jobs:
  installation:
    name: Setting up a pre-installed environment
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'automerge') != true
    outputs:
      cypress-matrix: ${{ steps.build-matrix.outputs.cypress-matrix }}
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Download deps
        run: bahmutov/npm-install@v1

      - name: 📥 Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: 🏄 Copy test env vars
        run: cp .env.example .env

      - name: 🛠 Setup Database
        run: npx prisma migrate deploy

      - name: 🏦 Cache Database
        id: db-cache
        uses: actions/cache@v3
        with:
          path: prisma/data.db
          key: db-cache

      - name: 🏗 Build
        run: npm run build

      - name: Finalizing the installation process
        run: |-
          tar -czf /tmp/installation.tar.gz .

      - name: Uploading this installation for further use
        uses: actions/upload-artifact@v3
        with:
          name: installation
          path: /tmp/installation.tar.gz
          retention-days: 1
  
  lint:
    name: ⬣ ESLint
    runs-on: ubuntu-latest
    needs: [installation]
    steps:
      - name: Get pre-installed package
        uses: actions/download-artifact@v3
        with:
          name: installation

      - name: Inflating pre-installation
        run: |-
          tar -xzf installation.tar.gz
          rm -f installation.tar.gz

      - name: 🔬 Lint
        run: npm run lint

  typecheck:
    name: ʦ TypeScript
    runs-on: ubuntu-latest
    needs: [installation]
    steps:
      - name: Fetch pre-installed package
        uses: actions/download-artifact@v3
        with:
          name: installation

      - name: Inflating pre-installation
        run: |-
          tar -xzf installation.tar.gz
          rm -f installation.tar.gz

      - name: 🔎 Type check
        run: npm run typecheck --if-present

  vitest:
    name: ⚡ Vitest
    runs-on: ubuntu-latest
    needs: [installation]
    steps:
      - name: Fetch pre-installed package
        uses: actions/download-artifact@v3
        with:
          name: installation

      - name: Inflating pre-installation
        run: |-
          tar -xzf installation.tar.gz
          rm -f installation.tar.gz

      - name: ⚡ Run vitest
        run: npm run test -- --coverage

  playwright:
    name: 🎭 Playwright
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [installation]
    steps:
      - name: Fetch pre-installed package
        uses: actions/download-artifact@v3
        with:
          name: installation

      - name: Inflating pre-installation
        run: |-
          tar -xzf installation.tar.gz
          rm -f installation.tar.gz

      - name: 🎭 Playwright tests
        run: npx playwright test

      - name: 📊 Upload report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [installation, lint, typecheck, vitest, playwright]
    # only build/deploy main branch on pushes
    if:
      ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') &&
      github.event_name == 'push' }}

    steps:
      - name: Fetch pre-installed package
        uses: actions/download-artifact@v3
        with:
          name: installation

      - name: Inflating pre-installation
        run: |-
          tar -xzf installation.tar.gz
          rm -f installation.tar.gz

      - name: 👀 Read app name
        uses: SebRollen/toml-action@v1.0.2
        id: app_name
        with:
          file: 'fly.toml'
          field: 'app'

      - name: 🚀 Deploy Staging
        if: ${{ github.ref == 'refs/heads/dev' }}
        uses: superfly/flyctl-actions@1.3
        with:
          args:
            'deploy --remote-only --build-arg COMMIT_SHA=${{ github.sha }} --app
            ${{ steps.app_name.outputs.value }}-staging'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: 🚀 Deploy Production
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: superfly/flyctl-actions@1.3
        with:
          args: 'deploy --remote-only --build-arg COMMIT_SHA=${{ github.sha }}'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
